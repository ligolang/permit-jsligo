#import "./helpers/token.jsligo" "Token_helper"
#import "./helpers/log.jsligo" "Log"
#import "./helpers/assert.jsligo" "Assert"
#import "./bootstrap/bootstrap.jsligo" "Bootstrap"
#import "../src/main.jsligo" "Token"

const _ = Log.describe("[Set_admin] test suite");

// Boostrapping of the test environment
const init_tok_amount = 10n;

const bootstrap = () : [Token_helper.originated, address, [[address, key, string], [address, key, string], [address, key, string]]] => {
    let [admin, owners, owners_with_keys, ops] = Bootstrap.boot_state(Bootstrap.dummy_genesis_ts);
    let base_extended_storage = Token_helper.getInitialExtendedStorage(
      admin, Token_helper.dummyDefaultExpiry, Token_helper.dummyMaxExpiry);
    let tok = Bootstrap.boot_token(owners, ops, init_tok_amount, base_extended_storage);
    return [tok, admin, owners_with_keys]
};

// Successful setting of admin
const _test_success_set_admin = (_: unit) : unit => {
    let [tok, admin, owners] = bootstrap();
    let [owner1, _owner2, _owner3] = owners;
    let [owner1_addr, _owner1_1, _owner1_2] = owner1;
    Test.set_source(admin);
    Token_helper.setAdminSuccess(owner1_addr, tok.contr);
    let s = Test.get_storage(tok.taddr);
    assert (s.extension.admin == owner1_addr)
};

// Failure because sender is not current admin
const _test_failure_not_admin = (_: unit) : unit => {
    let [tok,_admin, owners] = bootstrap();
    let [owner1, _owner2, _owner3] = owners;
    let [owner1_addr, _owner1_1, _owner1_2] = owner1;
    let r = Token_helper.setAdmin(owner1_addr, tok.contr);
    Assert.string_failure(r, Token.Errors.requiresAdmin)
};

const test_success_set_admin : unit = _test_success_set_admin();
const test_failure_not_admin : unit = _test_failure_not_admin();
