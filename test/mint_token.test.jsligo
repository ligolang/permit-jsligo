#import "./helpers/token.jsligo" "Token_helper"
#import "./helpers/fa2.jsligo" "FA2_helper"
#import "./helpers/log.jsligo" "Log"
#import "./helpers/assert.jsligo" "Assert"
#import "./bootstrap/bootstrap.jsligo" "Bootstrap"
#import "../src/main.jsligo" "Token"

const _ = Log.describe("[Mint_token] test suite");

// Boostrapping of the test environment
const init_tok_amount = 10n;

const bootstrap = () : [Token_helper.originated, address, [[address, key, string], [address, key, string], [address, key, string]]] => {
    let [admin, owners, owners_with_keys, ops] = Bootstrap.boot_state(Bootstrap.dummy_genesis_ts);
    let base_extended_storage = Token_helper.getInitialExtendedStorage(
      admin, Token_helper.dummyDefaultExpiry, Token_helper.dummyMaxExpiry);
    let tok = Bootstrap.boot_token(owners, ops, init_tok_amount, base_extended_storage);
    return [tok, admin, owners_with_keys]
};

// Successful token mint
const _test_success = () : unit => {
    let [tok, admin, owners] = bootstrap();
    let [[owner1_addr, _owner1_1, _owner1_2], _owner2, _owner3] = owners;
    Test.set_source (admin);
    let token_id = 1n;
    let amount_ = 56n;
    Token_helper.mintTokenSuccess(list([{
       owner: owner1_addr,
       tokenId: token_id,
       amount_: amount_
    }]), tok.contr);
    let new_amount =  init_tok_amount + amount_;
    Token_helper.assertBalance(tok.taddr, owner1_addr, token_id, new_amount);
    Token_helper.assertSupply(tok.taddr, token_id, new_amount);
};

// Failure because sender is not current admin
const _test_failure_not_admin = () : unit => {
    let [tok, _, owners] = bootstrap();
    let [[owner1_addr, _owner1_1, _owner1_2], _owner2, _owner3] = owners;
    Test.set_source (owner1_addr);
    let r = Token_helper.mintToken(list([{
       owner: owner1_addr,
       tokenId: 1n,
       amount_: 1n,
    }]), tok.contr);
    Assert.string_failure(r, Token.Errors.requiresAdmin)
}

const test_success : unit = _test_success();
const test_failure_not_admin : unit = _test_failure_not_admin();
