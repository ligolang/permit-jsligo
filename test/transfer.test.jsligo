#import "./helpers/token.jsligo" "Token_helper"
#import "./helpers/log.jsligo" "Log"
#import "./helpers/assert.jsligo" "Assert"
#import "./bootstrap/bootstrap.jsligo" "Bootstrap"
#import "../src/main.jsligo" "Token"

const _ = Log.describe("[Transfer] test suite");

// Boostrapping of the test environment
const init_tok_amount = 10n;

const bootstrap = (init_ts: timestamp, initDefaultExpiry: nat, initMaxExpiry: nat) : [Token_helper.originated, address, [[address, key, string], [address, key, string], [address, key, string]]] => {
    let [admin, owners, owners_with_keys, ops] = Bootstrap.boot_state(init_ts);
    let base_extended_storage = Token_helper.getInitialExtendedStorage(admin, initDefaultExpiry, initMaxExpiry);
    let tok = Bootstrap.boot_token(owners, ops, init_tok_amount, base_extended_storage);
    return [tok, admin, owners_with_keys]
};

// Successful transfer with permit
const _test_success = () : unit => {
    let [tok, _, owners] = bootstrap(("2000-01-01t10:10:10Z" as timestamp), 3600n, 7200n);
    let [owner1, owner2, _owner3] = owners;
    let [owner1_addr, _owner1_1, _owner1_2] = owner1;
    let [owner2_addr, _owner2_1, _owner2_2] = owner2;
    let transfer_request : Token.FA2.transfer_from = {
        from_:owner1_addr,
        txs:list([{to_:owner2_addr, amount:2n, token_id:1n}])
    };
    let hash_ = Crypto.blake2b (Bytes.pack (transfer_request));
    let permit = Token_helper.makePermit(hash_, owner1, tok.addr, 0n);
    Token_helper.permitSuccess(list([permit]), tok.contr);
    let transfer_requests  : Token.FA2.transfer = list([transfer_request]);
    Test.set_source (owner2_addr);
    Token_helper.transferSuccess(transfer_requests, tok.contr);
    Token_helper.assertBalance(tok.taddr, owner1_addr, 1n, 8n);
    Token_helper.assertBalance(tok.taddr, owner2_addr, 1n, 2n);
    Token_helper.assertNoPermit(tok.taddr, [owner1_addr, hash_])
};

// Successful with permit expired but sender is operator
const _test_success_by_operator_with_expired_permit = () : unit => {
    let initDefaultExpiry = 86_400n;
    let initMaxExpiry = 259_200n;
    let now = ("2000-01-03t10:10:10Z" as timestamp);
    let expired = ("2000-01-01t10:10:10Z" as timestamp);

    let [admin, owners, owners_with_keys, ops] = Bootstrap.boot_state(now);
    let [owner1, owner2, _owner3] = owners_with_keys;
    let [owner1_addr, _owner1_1, _owner1_2] = owner1;
    let [owner2_addr, _owner2_1, _owner2_2] = owner2;
    let [op1, _op2, _op3] = ops;

    let transfer_request : Token.FA2.transfer_from = {
        from_:owner1_addr,
        txs:list([{to_:owner2_addr, amount:2n, token_id:1n}])
    };
    let hash_ = Crypto.blake2b (Bytes.pack (transfer_request));

    let extended_storage = Token_helper.getInitialExtendedStorage(admin, initDefaultExpiry, initMaxExpiry);
    let extended_storage_modified = { ...extended_storage,
        permits : Big_map.literal(list([ [[owner1_addr, hash_], expired] ])),
        counter : 1n
    };

    let tok = Bootstrap.boot_token(owners, ops, init_tok_amount, extended_storage_modified);
    Test.set_source (op1);
    let transfer_requests : Token.FA2.transfer = list([transfer_request]);
    Token_helper.transferSuccess(transfer_requests, tok.contr);
    Token_helper.assertBalance(tok.taddr, owner1_addr, 1n, 8n);
    Token_helper.assertBalance(tok.taddr, owner2_addr, 1n, 2n);
};

// Failing because the permit has expired
const _test_failure_expired_permit = () : unit => {
    let initDefaultExpiry = 86_400n;
    let initMaxExpiry = 259_200n;
    let now = ("2000-01-03t10:10:10Z" as timestamp);
    let expired = ("2000-01-01t10:10:10Z" as timestamp);

    let [admin, owners, owners_with_keys, ops] = Bootstrap.boot_state(now);
    let [owner1, owner2, _owner3] = owners_with_keys;
    let [owner1_addr, _owner1_1, _owner1_2] = owner1;
    let [owner2_addr, _owner2_1, _owner2_2] = owner2;

    let transfer_request = ({
        from_:owner1_addr,
        txs:list([{to_:owner2_addr, amount:2n, token_id:1n}])
    });
    let hash_ = Crypto.blake2b (Bytes.pack (transfer_request));

    let extended_storage = Token_helper.getInitialExtendedStorage(admin, initDefaultExpiry, initMaxExpiry);
    let extended_storage_modified = { ...extended_storage,
        permits : Big_map.literal(list([
            [[owner1_addr, hash_], expired]
        ])),
        counter : 1n
    };

    let tok = Bootstrap.boot_token(owners, ops, init_tok_amount, extended_storage_modified);
    Test.set_source (owner2_addr);
    let r = Token_helper.transfer(list([transfer_request]), tok.contr);
    Assert.string_failure(r, Token.FA2.Errors.not_operator)
};

const test_success : unit = _test_success();
const test_success_by_operator_with_expired_permit : unit = _test_success_by_operator_with_expired_permit();
const test_failure_expired_permit : unit = _test_failure_expired_permit();
