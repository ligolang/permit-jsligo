#import "../../src/main.jsligo" "Token"
#import "./assert.jsligo" "Assert"

// Some types for readability
type taddr = typed_address<Token.parameter, Token.storage>;
type contr = contract<Token.parameter>;
export type originated = {
    addr: address,
    taddr: taddr,
    //owners: address list;
    contr: contr
};

type initial_extended_storage = {
    admin : address,
    counter : nat,
    defaultExpiry : nat,
    maxExpiry : nat,
    permits : Token.Extension.permits,
    userExpiries : Token.Extension.userExpiries,
    permitExpiries : Token.Extension.permitExpiries,
    extension : Token.Extension.TokenTotalSupply.t
};

// Some dummy values when they don't matter for a given test 
const dummyDefaultExpiry = (0 as nat);
const dummyMaxExpiry = (0 as nat);

export const getInitialExtendedStorage = (admin: address, initDefaultExpiry: nat, initMaxExpiry: nat) : initial_extended_storage => {
    return {
        admin : admin,
        counter : (0 as nat),
        defaultExpiry : initDefaultExpiry,
        maxExpiry : initMaxExpiry,
        permits : (Big_map.empty as Token.Extension.permits),
        userExpiries : (Big_map.empty as Token.Extension.userExpiries),
        permitExpiries : (Big_map.empty as Token.Extension.permitExpiries),
        extension : (Big_map.empty as Token.TokenTotalSupply.t)
    };
};

// Originate a Token contract with given init_storage storage 
export const originate = (init_storage: Token.storage) : originated => {
    let [taddr, _, _] = Test.originate(Token.main, init_storage, 0 as tez);
    let contr = Test.to_contract (taddr);
    let addr = Tezos.address (contr);
    return { addr : addr, taddr : taddr, contr : contr };
};

export const originateFromFile = (init_storage : Token.storage) : originated => {
    let f = "./src/main.jsligo";
    let v_mich = Test.run( ((x: Token.storage) => x), init_storage);
    let [addr, _, _] = Test.originate_from_file(f, "main", (list(["getDefaultExpiry", "getCounter"]) as list<string>), v_mich, 0 as tez);
    let taddr : taddr = Test.cast_address (addr);
    let contr = Test.to_contract (taddr);
    return {addr : addr, taddr : taddr, contr : contr}
};


// Make a permit with given packed params and secret key
// The chain_id is equal to 0x00000000 in the test framework
export const makePermit = (hash_: bytes, account: [address, key, string], token_addr: address, counter: nat) : Token.permitParams => {
    let [_, pubKey, secretKey] = account;
    let packed = Bytes.pack ([[0x00000000, token_addr], [counter, hash_]]);
    let sig = Test.sign(secretKey, packed);
    return [pubKey, [sig, hash_]]
};

// Call entry point of Token contr contract
const call = (p: Token.parameter, contr: contr) : test_exec_result =>
    Test.transfer_to_contract(contr, p, (0 as mutez))

export const permit = (p: list<Token.permitParams>, contr: contr) : test_exec_result =>
    call(Permit(p), contr)

export const setExpiry = (p: Token.expiryParams, contr: contr) : test_exec_result =>
    call(SetExpiry(p), contr)

export const setAdmin = (p: address, contr: contr) : test_exec_result =>
    call(SetAdmin(p), contr)

export const transfer = (p: Token.FA2.transfer, contr: contr) : test_exec_result => {
    let p : Token.parameter = Transfer(p);
    return call(p, contr)
};

export const createToken = (md: Token.FA2.TokenMetadata.data, owner: address, amount: nat, contr: contr) : test_exec_result =>
    call(Create_token([md, owner, amount]), contr);

export const mintToken = (p: list<Token.mintOrBurn>, contr: contr) : test_exec_result =>
    call(Mint_token(p), contr)

export const burnToken = (p: list<Token.mintOrBurn>, contr: contr) : test_exec_result =>
    call(Burn_token(p), contr)

export const permitSuccess = (p: list<Token.permitParams>, contr: contr) : unit =>
    Assert.tx_success (permit(p, contr))

export const setExpirySuccess = (p: Token.expiryParams, contr: contr) : unit =>
    Assert.tx_success (setExpiry(p, contr))

export const setAdminSuccess = (p: address, contr: contr) : unit =>
    Assert.tx_success (setAdmin(p, contr))

export const transferSuccess = (p: Token.FA2.transfer, contr: contr) : unit =>
    Assert.tx_success (transfer(p, contr))

export const createTokenSuccess = (md: Token.FA2.TokenMetadata.data, owner: address, amount: nat, contr: contr) : unit =>
    Assert.tx_success (createToken(md, owner, amount, contr))

export const mintTokenSuccess = (p: list<Token.mintOrBurn>, contr: contr) : unit =>
    Assert.tx_success (mintToken(p, contr))

export const burnTokenSuccess = (p: list<Token.mintOrBurn>, contr: contr) : unit => {
    Assert.tx_success (burnToken(p, contr));
};

// Assert Token contract at [taddr] has permit with [address, hash] key 
export const assertHasPermit = (taddr: taddr, paramPermitKey: Token.Extension.permitKey) : unit => {
    let s = Test.get_storage (taddr);
    match (Big_map.find_opt(paramPermitKey, s.extension.permits), {
        Some: (_: timestamp) => unit,
        None: () => Test.failwith("Permits Big_map key should not be missing")
    })
};

// Assert Token contract at [taddr] has no permit with [address, hash] key
export const assertNoPermit = (taddr: taddr, paramPermitKey: Token.Extension.permitKey) : unit => {
    let s = Test.get_storage (taddr);
    match (Big_map.find_opt(paramPermitKey, s.extension.permits), {
        Some: (_: timestamp) => Test.failwith("Permits Big_map key should be None"),
        None: () => unit
    })
};

// Assert Token contract at [taddr] has counter equals to [counter]
export const assertCounter = (taddr: taddr, counter: nat) : unit => {
    let s = Test.get_storage (taddr);
    assert_with_error( (s.extension.counter == counter), "Counter does not have expected value");
};

// Assert Token contract at [taddr] has user expiry for [userAddr] equal to [seconds]
export const assertUserExpiry = (taddr: taddr, userAddr: address, seconds: option<nat>) : unit => {
    let s = Test.get_storage (taddr);
    match (Big_map.find_opt(userAddr, s.extension.userExpiries), {
        Some: (s: option<seconds>) => assert (s == seconds),
        None: () => Test.failwith("User epiries Big_map key should not be missing")
    })
};

// Assert Token contract at [taddr] has user permit expiry for [userAddr] and
// hash [hash_] equal to [seconds] 
export const assertPermitExpiry = (taddr: taddr, userAddr: address, hash_: bytes, seconds: option<nat>) : unit => {
    let s = Test.get_storage (taddr);
    match (Big_map.find_opt([userAddr, hash_], s.extension.permitExpiries), {
        Some: (s: option<seconds>) => assert (s == seconds),
        None: () => Test.failwith("Permit epiries Big_map key should not be missing")
    })
};

// assert Token contract at [taddr] have [owner] address with [amount_] tokens in its ledger
export const assertBalance = (taddr: taddr, owner: address, tokenId: nat, amount_: nat) : unit => {
    let s = Test.get_storage (taddr);
    match (Big_map.find_opt([owner, tokenId], s.ledger), {
        Some: (tokens: nat) => assert(tokens == amount_),
        None: () => Test.failwith("Big_map key should not be missing")
    })
};

// assert Token contract at [taddr] have tokenTotalSupply for [tokenId] matching [amount_] 
export const assertSupply = (taddr: taddr, tokenId: Token.FA2.Ledger.token_id, amount_: nat) : unit => {
    let s = Test.get_storage (taddr);
    match (Big_map.find_opt(tokenId, s.extension.extension), {
        Some: (tokens: nat) => assert(tokens == amount_),
        None: () => Test.failwith("Big_map key should not be missing")
    })
};
